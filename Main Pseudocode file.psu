// TASK 1

// TASK 1.1
// Design an algorithm to search for a specific value in ItemDescription and, if found, to output the array index where the value is found. Output a suitable message if the value is not found.

DECLARE Index, Counter, n : INTEGER
DECLARE DesiredValue : STRING

OUTPUT "Enter the value you want to search for: "
INPUT DesiredValue

Index ← -1
Counter ← 0

WHILE (Counter < n) AND (Index <> -1) DO
    
    IF ItemDescription[Counter] = DesiredValue
      THEN
        Index ← Counter
    ENDIF

ENDWHILE

IF Index = -1:
  THEN
    OUTPUT "The element entered was not found."
  
  ELSE
    OUTPUT "The element entered was found at", Index
ENDIF


// TASK 1.3
// Extend the algorithm from Task 1.1 to output the corresponding values from the other arrays.

DECLARE Index, Counter, n : INTEGER
DECLARE DesiredValue : STRING

OUTPUT "Enter the value you want to search for: "
INPUT DesiredValue

Index ← -1
Counter ← 0

WHILE (Counter < n) AND (Index <> -1) DO
    
    IF ItemDescription[Counter] = DesiredValue
      THEN
        Index ← Counter
    ENDIF

ENDWHILE

IF Index = -1:
  THEN
    OUTPUT "The element entered was not found."
  
  ELSE
    OUTPUT "The element entered was found at", Index
    OUTPUT "Item Code:", ItemCode[Index]
    OUTPUT "Price:", Price[Index]
    OUTPUT "Number in stock:", NumberInStock[Index]
ENDIF


// TASK 1.4
// Write program code to produce a report displaying all the information stored about each item for which the number in stock is below a given level.

DECLARE ThresholdLevel, Counter, n : INTEGER

OUTPUT "Enter the minimum stock level: "
INPUT ThresholdLevel

FOR Counter ← 1 TO n
    
    IF NumberInStock[Counter] < ThresholdLevel
      
      THEN
        OUTPUT "Item Code:", ItemCode[Counter]
        OUTPUT "Item Description:", ItemDescription[Counter]
        OUTPUT "Price:", Price[Counter]
        OUTPUT "Number in stock:", NumberInStock[Counter]
    
    ENDIF

ENDFOR